gender + race + gkfreelunch + gksurban |0|0,
data = star)
original_statistic <- original_model$coefficients[1]
# Monte Carlo Permutation Test
n_permutations <- 500
permuted_statistics <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_treatment <- sample(star$gkclasstype)
permuted_model <- felm(g8tmathss ~ shuffled_treatment |
gender + race + gkfreelunch + gksurban|0|0,
data = star)
# Store the coefficient of the shuffled treatment
permuted_statistics[i] <- permuted_model$coefficients[[1]]
print(i)
}
p_value <- mean(abs(permuted_statistics) >= abs(original_statistic))
print(p_value)
# permuted_model <- felm(g8tmathss ~ shuffled_treatment |
#                                   gender + race + gkfreelunch + gksurban|0|0,
#                      data = star)
permuted_model <- lm(g8tmathss ~ shuffled_treatment + gender + race + gkfreelunch + gksurban, data = star)
permuted_model$coefficients[[1]]
permuted_model$coefficients
permuted_model$coefficients[[2]]
for (i in 1:n_permutations) {
shuffled_treatment <- sample(star$gkclasstype)
# permuted_model <- felm(g8tmathss ~ shuffled_treatment |
#                                   gender + race + gkfreelunch + gksurban|0|0,
#                      data = star)
permuted_model <- lm(g8tmathss ~ shuffled_treatment + gender + race + gkfreelunch + gksurban, data = star)
# Store the coefficient of the shuffled treatment
permuted_statistics[i] <- permuted_model$coefficients[[2]]
print(i)
}
set.seed(2001)
# Regression model
original_model <- lm(g8tmathss ~ gkclasstype + gender +
race + gkfreelunch + gksurban,
data = star)
estimate <- original_model$coefficients[1]
# Monte Carlo Permutation Test
n_permutations <- 1000
permuted_statistics <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_treatment <- sample(star$gkclasstype)
permuted_model <- lm(g8tmathss ~ shuffled_treatment + gender +
race + gkfreelunch + gksurban,
data = star)
permuted_estimate[i] <- permuted_model$coefficients[[2]]
}
set.seed(2001)
# Regression model
original_model <- lm(g8tmathss ~ gkclasstype + gender +
race + gkfreelunch + gksurban,
data = star)
estimate <- original_model$coefficients[1]
# Monte Carlo Permutation Test
n_permutations <- 1000
permuted_estimate <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_treatment <- sample(star$gkclasstype)
permuted_model <- lm(g8tmathss ~ shuffled_treatment + gender +
race + gkfreelunch + gksurban,
data = star)
permuted_estimate[i] <- permuted_model$coefficients[[2]]
}
p_value <- mean(abs(permuted_estimate) >= abs(estimate))
print(p_value)
# Regression model
original_model <- lm(g8tmathss ~ gkclasstype + gender +
race + gkfreelunch + gksurban,
data = star)
estimate <- original_model$coefficients[1]
estimate
estimate <- original_model$coefficients[2]
estimate
original_model
stargazer::stargazer(original_model, type = "text")
# create a stargazer table that is only gkclasstype and then fixed effects indication
stargazer::stargazer(original_model, type = "text",
dep.var.caption = "Dependent Variable: Math Score",
covariate.labels = c("Small Class Type"))
# startgazer table for original model
stargazer::stargazer(original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = c("Class Type"),
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
# startgazer table for original model
stargazer::stargazer(
original_model, type = "latex", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = c("Class Type"),
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
set.seed(2001)
# Regression model
original_model <- lm(g8tmathss ~ gkclasstype + gender +
race + gkfreelunch + gksurban,
data = star)
# startgazer table for original model
stargazer::stargazer(
original_model, type = "latex", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = c("Class Type"),
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
# startgazer table for original model
stargazer::stargazer(
original_model, type = "latex", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "latex", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "latex", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
p.auto = FALSE, p = 0.05,
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
p.auto = T, p = 0.05,
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
p.auto = T,
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
# display the p values next to coeffecieint
p.auto = TRUE,
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, single.row = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
# display the p values next to coeffecieint
p.auto = TRUE,
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
align = TRUE, digits = 3, font.size = "small")
stargazer::stargazer(
original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
report=('vc*p'), align = TRUE, digits = 3, font.size = "small")
set.seed(2001)
# Regression model
original_model <- lm(g8tmathss ~ gkclasstype + gender +
race + gkfreelunch + gksurban,
data = star)
stargazer::stargazer(
original_model, type = "text", title = "Regression Results",
dep.var.labels = "8th Grade Math Score",
covariate.labels = "Class Type",
omit = c('gender','race', 'gkfreelunch', 'gksurban'),
omit.labels = c('Gender Fixed Effects', 'Race', 'Free Lunch Status', 'Urbanicity'),
report=('vc*p'), align = TRUE, digits = 3, font.size = "small")
estimate <- original_model$coefficients[2]
# Monte Carlo Permutation Test
n_permutations <- 1000
permuted_estimate <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_treatment <- sample(star$gkclasstype)
permuted_model <- lm(g8tmathss ~ shuffled_treatment + gender +
race + gkfreelunch + gksurban,
data = star)
permuted_estimate[i] <- permuted_model$coefficients[[2]]
}
p_value <- mean(abs(permuted_estimate) >= abs(estimate))
print(p_value)
shuffled_treatment <- sample(star$gkclasstype)
shuffled_treatment
wilcox.test(g8tmathss ~ gkclasstype, data = star)
wilcox.test(g8tmathss ~ gkclasstype, data = star)$estimate
original_test <- wilcox.test(small_class, regular_large_class, exact = FALSE, conf.int = TRUE)
hl_estimate <- original_test$estimate
print(paste("Hodges-Lehmann Estimate:", hl_estimate))
wilcox.test(g8tmathss ~ gkclasstype, data = star, exact = FALSE, conf.int = TRUE)
wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = FALSE, conf.int = TRUE)$estimate
hl_estimate <- wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = FALSE, conf.int = TRUE)$estimate
print(paste("Hodges-Lehmann Estimate:", hl_estimate))
wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = FALSE, conf.int = TRUE)
wilcox.test(small_class, regular_large_class, exact = FALSE, conf.int = TRUE)
hl_estimate <- wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = FALSE, conf.int = TRUE)$estimate
print(paste("Hodges-Lehmann Estimate:", hl_estimate))
print(paste("Hodges-Lehmann Estimate:", round(hl_estimate,2)))
print(paste("Hodges-Lehmann Estimate:", round(hl_estimate,4)))
round(hl_estimate, 4)
hl_estimate
hl_estimate[1]
hl_estimate[[[1]]
hl_estimate[[1]]
print(paste("Hodges-Lehmann Estimate:", round(hl_estimate[[1]], 4)))
print(paste("Hodges-Lehmann Estimate:", round(hl_estimate[[1]], 4)))
hl_estimate <- wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = FALSE, conf.int = TRUE)$estimate
print(paste("Hodges-Lehmann Estimate:", round(hl_estimate[[1]], 4)))
print(paste("Hodges-Lehmann Estimate:", round(hl_estimate[[1]], 2)))
print(paste("Hodges-Lehmann Estimate:", round(hl_estimate[[1]], 9)))
print(paste("Hodges-Lehmann Estimate:", hl_estimate))
hl_estimates <- numeric(n_permutations)
for (i in 1:n_permutations) {
# Shuffle the group labels
combined_scores <- c(small_class, regular_large_class)
shuffled_scores <- sample(combined_scores)
# Split into two new groups
shuffled_small_class <- shuffled_scores[1:length(small_class)]
shuffled_regular_large_class <- shuffled_scores[(length(small_class) + 1):length(combined_scores)]
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_small_class, shuffled_regular_large_class, exact = FALSE, conf.int = FALSE)
hl_estimates[i] <- test_shuffled$estimate
}
star.reduced <- star %>%
select(g8tmathss, gkclasstype)
hl_estimate <- wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = FALSE, conf.int = TRUE)$estimate
print(paste("Hodges-Lehmann Estimate:", hl_estimate))
# Shuffle the group labels
shuffled_scores <- sample(star.reduced)
shuffled_scores
shuffled_scores == shuffled_scores
# Split into two new groups
shuffled_small_class <- shuffled_scores[gkclasstype == "small"]
shuffled_scores
# Split into two new groups
shuffled_small_class <- shuffled_scores[gkclasstype == "SMALL CLASS"]
# Split into two new groups
shuffled_small_class <- shuffled_scores[gkclasstype == "SMALL CLASS",]
# Split into two new groups
shuffled_small_class <- shuffled_scores[shuffled_scores$gkclasstype == "SMALL CLASS"]
# Split into two new groups
shuffled_small_class <- shuffled_scores[shuffled_scores$gkclasstype == "SMALL CLASS",]
shuffled_small_class
shuffled_regular_class <- shuffled_scores[shuffled_scores$gkclasstype == "REGULAR CLASS",]
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_small_class, shuffled_regular_large_class, exact = FALSE, conf.int = FALSE)
shuffled_scores <- sample(star$g8tmathss)
shuffled_scores
shuffled_scores == star$g8tmathss
# Monte Carlo Permutation Test
n_permutations <- 50
permuted_estimate <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_treatment <- sample(star$gkclasstype)
permuted_model <- lm(g8tmathss ~ shuffled_treatment + gender +
race + gkfreelunch + gksurban,
data = star)
permuted_estimate[i] <- permuted_model$coefficients[[2]]
}
p_value <- mean(abs(permuted_estimate) >= abs(estimate))
print(p_value)
permuted_estimate
# Monte Carlo Permutation Test
n_permutations <- 50
permuted_estimate <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_classtype <- sample(star$gkclasstype)
permuted_model <- lm(g8tmathss ~ shuffled_classtype + gender +
race + gkfreelunch + gksurban,
data = star)
permuted_estimate[i] <- permuted_model$coefficients[[2]]
}
p_value <- mean(abs(permuted_estimate) >= abs(estimate))
print(p_value)
# Monte Carlo Permutation Test
n_permutations <- 200
permuted_estimate <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_classtype <- sample(star$gkclasstype)
permuted_model <- lm(g8tmathss ~ shuffled_classtype + gender +
race + gkfreelunch + gksurban,
data = star)
permuted_estimate[i] <- permuted_model$coefficients[[2]]
}
p_value <- mean(abs(permuted_estimate) >= abs(estimate))
print(p_value)
# Monte Carlo Permutation Test
n_permutations <- 1000
permuted_estimate <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_classtype <- sample(star$gkclasstype)
permuted_model <- lm(g8tmathss ~ shuffled_classtype + gender +
race + gkfreelunch + gksurban,
data = star)
permuted_estimate[i] <- permuted_model$coefficients[[2]]
}
p_value <- mean(abs(permuted_estimate) >= abs(estimate))
print(p_value)
hl_estimate <- wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = FALSE, conf.int = TRUE)$estimate
print(paste("Hodges-Lehmann Estimate:", hl_estimate))
wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = T, conf.int = TRUE)
wilcox.test(g8tmathss ~ gkclasstype, data = star,
exact = F, conf.int = TRUE)
wilcox.test(g8tmathss ~ gkclasstype, data = star, conf.int = TRUE)
wilcox.test(g8tmathss ~ gkclasstype, data = star)
star
shuffled_scores <- sample(star$g8tmathss)
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ star$gkclasstype,
exact = FALSE, conf.int = FALSE)
hl_estimates[i] <- test_shuffled$estimate
hl_estimates <- numeric(n_permutations)
for (i in 1:n_permutations) {
shuffled_scores <- sample(star$g8tmathss)
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ star$gkclasstype,
exact = FALSE, conf.int = FALSE)
hl_estimates[i] <- test_shuffled$estimate
}
hl_estimates <- numeric(n_permutations)
shuffled_scores <- sample(star$g8tmathss)
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ star$gkclasstype,
exact = FALSE, conf.int = FALSE)
test_shuffled$estimate
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ gkclasstype, data = star,
exact = FALSE, conf.int = FALSE)
test_shuffled
test_shuffled$estimate
wilcox.test(shuffled_scores ~ gkclasstype, data = star,
exact = FALSE, conf.int = FALSE)
wilcox.test(shuffled_scores ~ gkclasstype, data = star,
exact = T, conf.int = FALSE)
sample(star$g8tmathss)
star$shuffled_scores <- sample(star$g8tmathss)
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ gkclasstype, data = star,
exact = FALSE, conf.int = FALSE)
hl_estimates[i] <- test_shuffled$estimate
test_shuffled
View(test_shuffled)
print(paste("Hodges-Lehmann Estimate:", hl_estimate))
# display kernal density plots of scores by class type
ggplot(star, aes(x = g8tmathss, fill = gkclasstype)) +
geom_density(alpha = 0.5) +
labs(title = "8th Grade Math Scores by Class Type",
x = "8th Grade Math Score",
y = "Density") +
theme_minimal()
print(paste("Hodges-Lehmann Estimate:", hl_estimate))
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ gkclasstype, data = star,
exact = FALSE, conf.int = FALSE)
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ gkclasstype, data = star,
exact = FALSE, conf.int = T)
test_shuffled
test_shuffled$estimate
hl_estimates <- numeric(n_permutations)
for (i in 1:n_permutations) {
star$shuffled_scores <- sample(star$g8tmathss)
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ gkclasstype, data = star,
exact = FALSE, conf.int = T)
hl_estimates[i] <- test_shuffled$estimate
}
hl_estimates
hl_estimates <- numeric(500)
for (i in 1:500) {
star$shuffled_scores <- sample(star$g8tmathss)
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ gkclasstype, data = star,
exact = FALSE, conf.int = T)
hl_estimates[i] <- test_shuffled$estimate
}
# Compute 95% CI from the permutation distribution
ci_lower <- quantile(hl_estimates, probs = 0.025)
ci_upper <- quantile(hl_estimates, probs = 0.975)
print(paste("95% CI: [", ci_lower, ", ", ci_upper, "]"))
wilcox.test(g8tmathss ~ gkclasstype, data = star, conf.int = TRUE)
wilcox.test(g8tmathss ~ gkclasstype, data = star, conf.int = TRUE)$conf.int
print(paste("95% CI: [", ci_lower, ", ", ci_upper, "]"))
mean(hl_estimates)
hl_estimates <- numeric(100)
for (i in 1:100) {
star$shuffled_scores <- sample(star$g8tmathss)
# Calculate HL estimate for shuffled data
test_shuffled <- wilcox.test(shuffled_scores ~ gkclasstype,
data = star,
exact = F, conf.int = T)
hl_estimates[i] <- test_shuffled$estimate
}
# Compute 95% CI from the permutation distribution
ci_lower <- quantile(hl_estimates, probs = 0.025)
ci_upper <- quantile(hl_estimates, probs = 0.975)
print(paste("95% CI: [", ci_lower, ", ", ci_upper, "]"))
hl_estimate
hl_estimate
hl_estimate <- wilcox.test(g8tmathss ~ gkclasstype,
data = star, conf.int = T)
hl_estimate
print(paste("Hodges-Lehmann Estimate:", hl_estimate$estimate))
social <- read.csv("PNASsocial.csv")
social <- read.csv("data/PNASsocial.csv")
social <- read.csv("PS2/PNASsocial.csv")
social
# drop where woreAnticonflictWristband is missing
social <- social[!is.na(social$woreAnticonflictWristband),]
# get a column that is the number of friends each student has
social$friends <- rowSums(!is.na(social[,6:15]))
social
glimpse(friends)
glimpse(social)
social[,15]
social[15,]
social[,15]
social[,16]
glimpse(social)
# get a column that is the number of friends each student has friend1 through friend10
social$friends <- rowSums(!is.na(social[,7:16]))
glimpse(social)
social$friend_wore <- apply(
social[,7:16], 1,
function(x) sum(social$woreAnticonflictWristband[match(x, social$studentID)], na.rm = T))
glimpse(social)
match(social$friend1, social$studentID)
View(social)
social$friend_wore_frac <- ifelse(social$friends > 0, social$friend_wore / social$friends, NA)
glimpse(social)
social <- read.csv("PS2/PNASsocial.csv")
# get the studentId of observations wheren woreAnticonflictWristband is NA
students_to_drop <- social[is.na(social$woreAnticonflictWristband),]$studentID
social <- social[!is.na(social$woreAnticonflictWristband),]
social[,7:16] <- lapply(social[,7:16], function(x) ifelse(x %in% students_to_drop, NA, x))
social$friends <- rowSums(!is.na(social[,7:16]))
social$friend_wore <- apply(
social[,7:16], 1,
function(x) sum(social$woreAnticonflictWristband[match(x, social$studentID)], na.rm = T))
social$friend_wore_frac <- ifelse(social$friends > 0, social$friend_wore / social$friends, NA)
social <- read.csv("PS2/PNASsocial.csv")
students_to_drop <- social[is.na(social$woreAnticonflictWristband),]$studentID
social <- social[!is.na(social$woreAnticonflictWristband),]
social[,7:16] <- lapply(social[,7:16], function(x) ifelse(x %in% students_to_drop, NA, x))
social[,7:16] <- lapply(social[,7:16], function(x) ifelse(x %in% social$studentID, x, NA))
social <- read.csv("PS2/PNASsocial.csv")
students_to_drop <- social[is.na(social$woreAnticonflictWristband),]$studentID
social <- social[!is.na(social$woreAnticonflictWristband),]
social[,7:16] <- lapply(social[,7:16], function(x) ifelse(x %in% students_to_drop, NA, x))
social[,7:16] <- lapply(social[,7:16], function(x) ifelse(x %in% social$studentID, x, NA))
social$friends <- rowSums(!is.na(social[,7:16]))
social$friend_wore <- apply(
social[,7:16], 1,
function(x) sum(social$woreAnticonflictWristband[match(x, social$studentID)], na.rm = T))
social$friend_wore_frac <- ifelse(social$friends > 0, social$friend_wore / social$friends, NA)
social$friend_treated <- apply(
social[,7:16], 1,
function(x) sum(social$treatment[match(x, social$studentID)], na.rm = T))
social$friend_treated_frac <- ifelse(social$friends > 0, social$friend_treated / social$friends, NA)
felm(woreAnticonflictWristband ~ treatment | school_id + student_block | 0 | school_id, data = social)
felm(woreAnticonflictWristband ~ treatment + friend_treated_frac | school_id + student_block | 0 | school_id, data = social)
model <- felm(woreAnticonflictWristband ~ treatment + friend_treated_frac |
school_id + student_block | 0 | school_id, data = social)
stargazer::stargazer(model, type = "text")
model <- felm(woreAnticonflictWristband ~ treatment + friend_treated_frac |
school_id + student_block + eligible | 0 | school_id, data = social)
stargazer::stargazer(model, type = "text")
model <- felm(woreAnticonflictWristband ~ treatment + friend_treated_frac |
school_id + student_block | 0 | school_id, data = subset(social, eligible==0))
stargazer::stargazer(model, type = "text")
model <- felm(woreAnticonflictWristband ~ friend_treated_frac |
school_id + student_block | 0 | school_id, data = subset(social, eligible==0))
stargazer::stargazer(model, type = "text")
